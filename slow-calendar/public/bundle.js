(()=>{"use strict";function e(e,n,...s){if(!e)throw new TypeError(t(n,s))}function t(e,t){let s=0;return e.replace(/%[os]/gu,(()=>n(t[s++])))}function n(e){return"object"!=typeof e||null===e?String(e):Object.prototype.toString.call(e)}const s="undefined"!=typeof window?window:"undefined"!=typeof self?self:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:void 0;let i;class o{constructor(e,t){this.code=e,this.message=t}warn(...e){var t;try{i;const n=(null!==(t=(new Error).stack)&&void 0!==t?t:"").replace(/^(?:.+?\n){2}/gu,"\n");console.warn(this.message,...e,n)}catch(e){}}}const a=new o("W01","Unable to initialize event under dispatching."),r=new o("W02","Assigning any falsy value to 'cancelBubble' property has no effect."),l=new o("W03","Assigning any truthy value to 'returnValue' property has no effect."),c=new o("W04","Unable to preventDefault on non-cancelable events."),d=new o("W05","Unable to preventDefault inside passive event listener invocation."),h=new o("W06","An event listener wasn't added because it has been added already: %o, %o"),u=new o("W07","The %o option value was abandoned because the event listener wasn't added as duplicated."),p=new o("W08","The 'callback' argument must be a function or an object that has 'handleEvent' method: %o");new o("W09","Event attribute handler must be a function: %o");class g{static get NONE(){return v}static get CAPTURING_PHASE(){return m}static get AT_TARGET(){return E}static get BUBBLING_PHASE(){return y}constructor(e,t){Object.defineProperty(this,"isTrusted",{value:!1,enumerable:!0});const n=null!=t?t:{};f.set(this,{type:String(e),bubbles:Boolean(n.bubbles),cancelable:Boolean(n.cancelable),composed:Boolean(n.composed),target:null,currentTarget:null,stopPropagationFlag:!1,stopImmediatePropagationFlag:!1,canceledFlag:!1,inPassiveListenerFlag:!1,dispatchFlag:!1,timeStamp:Date.now()})}get type(){return b(this).type}get target(){return b(this).target}get srcElement(){return b(this).target}get currentTarget(){return b(this).currentTarget}composedPath(){const e=b(this).currentTarget;return e?[e]:[]}get NONE(){return v}get CAPTURING_PHASE(){return m}get AT_TARGET(){return E}get BUBBLING_PHASE(){return y}get eventPhase(){return b(this).dispatchFlag?2:0}stopPropagation(){b(this).stopPropagationFlag=!0}get cancelBubble(){return b(this).stopPropagationFlag}set cancelBubble(e){e?b(this).stopPropagationFlag=!0:r.warn()}stopImmediatePropagation(){const e=b(this);e.stopPropagationFlag=e.stopImmediatePropagationFlag=!0}get bubbles(){return b(this).bubbles}get cancelable(){return b(this).cancelable}get returnValue(){return!b(this).canceledFlag}set returnValue(e){e?l.warn():w(b(this))}preventDefault(){w(b(this))}get defaultPrevented(){return b(this).canceledFlag}get composed(){return b(this).composed}get isTrusted(){return!1}get timeStamp(){return b(this).timeStamp}initEvent(e,t=!1,n=!1){const s=b(this);s.dispatchFlag?a.warn():f.set(this,{...s,type:String(e),bubbles:Boolean(t),cancelable:Boolean(n),target:null,currentTarget:null,stopPropagationFlag:!1,stopImmediatePropagationFlag:!1,canceledFlag:!1})}}const v=0,m=1,E=2,y=3,f=new WeakMap;function b(t,n="this"){const s=f.get(t);return e(null!=s,"'%s' must be an object that Event constructor created, but got another one: %o",n,t),s}function w(e){e.inPassiveListenerFlag?d.warn():e.cancelable?e.canceledFlag=!0:c.warn()}Object.defineProperty(g,"NONE",{enumerable:!0}),Object.defineProperty(g,"CAPTURING_PHASE",{enumerable:!0}),Object.defineProperty(g,"AT_TARGET",{enumerable:!0}),Object.defineProperty(g,"BUBBLING_PHASE",{enumerable:!0});const D=Object.getOwnPropertyNames(g.prototype);for(let e=0;e<D.length;++e)"constructor"!==D[e]&&Object.defineProperty(g.prototype,D[e],{enumerable:!0});let _;void 0!==s&&void 0!==s.Event&&Object.setPrototypeOf(g.prototype,s.Event.prototype);const T={INDEX_SIZE_ERR:1,DOMSTRING_SIZE_ERR:2,HIERARCHY_REQUEST_ERR:3,WRONG_DOCUMENT_ERR:4,INVALID_CHARACTER_ERR:5,NO_DATA_ALLOWED_ERR:6,NO_MODIFICATION_ALLOWED_ERR:7,NOT_FOUND_ERR:8,NOT_SUPPORTED_ERR:9,INUSE_ATTRIBUTE_ERR:10,INVALID_STATE_ERR:11,SYNTAX_ERR:12,INVALID_MODIFICATION_ERR:13,NAMESPACE_ERR:14,INVALID_ACCESS_ERR:15,VALIDATION_ERR:16,TYPE_MISMATCH_ERR:17,SECURITY_ERR:18,NETWORK_ERR:19,ABORT_ERR:20,URL_MISMATCH_ERR:21,QUOTA_EXCEEDED_ERR:22,TIMEOUT_ERR:23,INVALID_NODE_TYPE_ERR:24,DATA_CLONE_ERR:25};function k(e){const t=Object.keys(T);for(let n=0;n<t.length;++n){const s=t[n],i=T[s];Object.defineProperty(e,s,{get:()=>i,configurable:!0,enumerable:!0})}}class P extends g{static wrap(e){return new(L(e))(e)}constructor(e){super(e.type,{bubbles:e.bubbles,cancelable:e.cancelable,composed:e.composed}),e.cancelBubble&&super.stopPropagation(),e.defaultPrevented&&super.preventDefault(),M.set(this,{original:e});const t=Object.keys(e);for(let n=0;n<t.length;++n){const s=t[n];s in this||Object.defineProperty(this,s,O(e,s))}}stopPropagation(){super.stopPropagation();const{original:e}=S(this);"stopPropagation"in e&&e.stopPropagation()}get cancelBubble(){return super.cancelBubble}set cancelBubble(e){super.cancelBubble=e;const{original:t}=S(this);"cancelBubble"in t&&(t.cancelBubble=e)}stopImmediatePropagation(){super.stopImmediatePropagation();const{original:e}=S(this);"stopImmediatePropagation"in e&&e.stopImmediatePropagation()}get returnValue(){return super.returnValue}set returnValue(e){super.returnValue=e;const{original:t}=S(this);"returnValue"in t&&(t.returnValue=e)}preventDefault(){super.preventDefault();const{original:e}=S(this);"preventDefault"in e&&e.preventDefault()}get timeStamp(){const{original:e}=S(this);return"timeStamp"in e?e.timeStamp:super.timeStamp}}const M=new WeakMap;function S(t){const n=M.get(t);return e(null!=n,"'this' is expected an Event object, but got",t),n}const R=new WeakMap;function L(e){const t=Object.getPrototypeOf(e);if(null==t)return P;let n=R.get(t);return null==n&&(n=function(e,t){class n extends e{}const s=Object.keys(t);for(let e=0;e<s.length;++e)Object.defineProperty(n.prototype,s[e],O(t,s[e]));return n}(L(t),t),R.set(t,n)),n}function O(e,t){const n=Object.getOwnPropertyDescriptor(e,t);return{get(){const e=S(this).original,n=e[t];return"function"==typeof n?n.bind(e):n},set(e){S(this).original[t]=e},configurable:n.configurable,enumerable:n.enumerable}}function $(e){return 1==(1&e.flags)}function I(e){return 2==(2&e.flags)}function F(e){return 4==(4&e.flags)}function A(e){return 8==(8&e.flags)}function N({callback:e},t,s){try{"function"==typeof e?e.call(t,s):"function"==typeof e.handleEvent&&e.handleEvent(s)}catch(e){!function(e){try{const t=e instanceof Error?e:new Error(n(e));if("function"==typeof dispatchEvent&&"function"==typeof ErrorEvent)dispatchEvent(new ErrorEvent("error",{error:t,message:t.message}));else if("undefined"!=typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",t);console.error(t)}catch(e){}}(e)}}function j({listeners:e},t,n){for(let s=0;s<e.length;++s)if(e[s].callback===t&&$(e[s])===n)return s;return-1}function x(e,t,n){const s=j(e,t,n);return-1!==s&&C(e,s)}function C(e,t,n=!1){const s=e.listeners[t];return function(e){e.flags|=8}(s),s.signal&&s.signal.removeEventListener("abort",s.signalListener),e.cow&&!n?(e.cow=!1,e.listeners=e.listeners.filter(((e,n)=>n!==t)),!1):(e.listeners.splice(t,1),!0)}R.set(Object.prototype,P),void 0!==s&&void 0!==s.Event&&R.set(s.Event.prototype,P);class G{constructor(){B.set(this,Object.create(null))}addEventListener(e,t,n){const s=H(this),{callback:i,capture:o,once:a,passive:r,signal:l,type:c}=function(e,t,n){var s;return W(t),"object"==typeof n&&null!==n?{type:String(e),callback:null!=t?t:void 0,capture:Boolean(n.capture),passive:Boolean(n.passive),once:Boolean(n.once),signal:null!==(s=n.signal)&&void 0!==s?s:void 0}:{type:String(e),callback:null!=t?t:void 0,capture:Boolean(n),passive:!1,once:!1,signal:void 0}}(e,t,n);if(null==i||(null==l?void 0:l.aborted))return;const d=function(e,t){var n;return null!==(n=e[t])&&void 0!==n?n:e[t]={attrCallback:void 0,attrListener:void 0,cow:!1,listeners:[]}}(s,c),p=j(d,i,o);-1===p?function(e,t,n,s,i,o){let a;o&&(a=x.bind(null,e,t,n),o.addEventListener("abort",a));const r=function(e,t,n,s,i,o){return{callback:e,flags:(t?1:0)|(n?2:0)|(s?4:0),signal:i,signalListener:o}}(t,n,s,i,o,a);e.cow?(e.cow=!1,e.listeners=[...e.listeners,r]):e.listeners.push(r)}(d,i,o,r,a,l):function(e,t,n,s){h.warn($(e)?"capture":"bubble",e.callback),I(e)!==t&&u.warn("passive"),F(e)!==n&&u.warn("once"),e.signal!==s&&u.warn("signal")}(d.listeners[p],r,a,l)}removeEventListener(e,t,n){const s=H(this),{callback:i,capture:o,type:a}=function(e,t,n){return W(t),"object"==typeof n&&null!==n?{type:String(e),callback:null!=t?t:void 0,capture:Boolean(n.capture)}:{type:String(e),callback:null!=t?t:void 0,capture:Boolean(n)}}(e,t,n),r=s[a];null!=i&&r&&x(r,i,o)}dispatchEvent(e){const t=H(this)[String(e.type)];if(null==t)return!0;const n=e instanceof g?e:P.wrap(e),i=b(n,"event");if(i.dispatchFlag)throw o="This event has been in dispatching.",s.DOMException?new s.DOMException(o,"InvalidStateError"):(null==_&&(_=class e extends Error{constructor(t){super(t),Error.captureStackTrace&&Error.captureStackTrace(this,e)}get code(){return 11}get name(){return"InvalidStateError"}},Object.defineProperties(_.prototype,{code:{enumerable:!0},name:{enumerable:!0}}),k(_),k(_.prototype)),new _(o));var o;if(i.dispatchFlag=!0,i.target=i.currentTarget=this,!i.stopPropagationFlag){const{cow:e,listeners:s}=t;t.cow=!0;for(let o=0;o<s.length;++o){const a=s[o];if(!A(a)&&(F(a)&&C(t,o,!e)&&(o-=1),i.inPassiveListenerFlag=I(a),N(a,this,n),i.inPassiveListenerFlag=!1,i.stopImmediatePropagationFlag))break}e||(t.cow=!1)}return i.target=null,i.currentTarget=null,i.stopImmediatePropagationFlag=!1,i.stopPropagationFlag=!1,i.dispatchFlag=!1,!i.canceledFlag}}const B=new WeakMap;function H(t,n="this"){const s=B.get(t);return e(null!=s,"'%s' must be an object that EventTarget constructor created, but got another one: %o",n,t),s}function W(e){if("function"!=typeof e&&("object"!=typeof e||null===e||"function"!=typeof e.handleEvent)){if(null!=e&&"object"!=typeof e)throw new TypeError(t(p.message,[e]));p.warn(e)}}const Y=Object.getOwnPropertyNames(G.prototype);for(let e=0;e<Y.length;++e)"constructor"!==Y[e]&&Object.defineProperty(G.prototype,Y[e],{enumerable:!0});function U(e,t){return e.filter((e=>e.date.getFullYear()===t.getFullYear()&&e.date.getMonth()===t.getMonth()&&e.date.getDate()===t.getDate())).sort(((e,t)=>!e.time&&t.time?-1:e.time&&!t.time?1:e.time||t.time?parseInt(e.time.replace(/^0/,"").replace(":",""))-parseInt(t.time.replace(/^0/,"").replace(":","")):0)).sort(((e,t)=>e.multiDays&&!t.multiDays?-1:!e.multiDays&&t.multiDays?1:void 0))}void 0!==s&&void 0!==s.EventTarget&&Object.setPrototypeOf(G.prototype,s.EventTarget.prototype);const V=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];class q extends G{constructor(e,t,n){super(),this.el=e,this._date=new Date,this.rootEl=e,this._date=t,this._events=n,this.render()}render(){this.rootEl.innerHTML="";const e=this._date.getMonth(),t=this._date.getFullYear(),n=new Date(t,e,1),s=new Date(t,e+1,0),i=n.getDay(),o=s.getDay(),a=s.getDate(),r=new Date(t,e,0).getDate(),l=[];let c=0;for(let n=r-i+1;n<=r;n++){const s=new Date(t,e-1,n);l.push({date:s,html:this.renderDay(s,n,c,"prev-month")}),c++}for(let n=1;n<=a;n++){const s=new Date(t,e,n);l.push({date:s,html:this.renderDay(s,n,c)}),c++}for(let n=1;n<=7-o-1;n++){const s=new Date(t,e+1,n);l.push({date:s,html:this.renderDay(s,n,c,"next-month")}),c++}for(const{date:e,html:t}of l)this.rootEl.insertAdjacentHTML("beforeend",t),this.rootEl.lastElementChild.addEventListener("click",(t=>{this.dispatchEvent(new CustomEvent("day-clicked",{detail:e}))}));this.updateNowMarker()}renderDay(e,t,n,s=""){const i=U(this._events,e);return`\n      <div class="day ${e.toDateString()===(new Date).toDateString()?"today":""} ${s}">\n        <div class="header">\n          <span class="day-name">${V[e.getDay()]}</span>\n          <span class="day-number">${t}</span>\n        </div>\n        <ul class="events">\n          ${i.map((e=>e.asOneLineHTML(n))).join("")}\n        </ul>\n      </div>\n    `}updateNowMarker(){const e=new Date,t=100*(100*e.getHours()+e.getMinutes())/2400,n=this.rootEl.querySelector(".day.today");if(n){const e=n.offsetHeight*t/100;this.rootEl.style.setProperty("--now-marker",`${e}px`)}setTimeout((()=>this.updateNowMarker()),1e3)}set date(e){this._date=e,this.render()}set events(e){this._events=e,this.render()}}const J=["January","February","March","April","May","June","July","August","September","October","November","December"];class X extends G{constructor(e,t,n){super(),this.el=e,this.selectedMode="month",this.rootEl=e,this._date=t,this.selectedMode=n,this.render()}formatMonthYear(){const e=this._date.getMonth(),t=this._date.getFullYear();return`${J[e]} ${t}`}render(){this.rootEl.innerHTML=`\n      <button id="prev-month">Prev</button>\n      <button id="today" class="primary">Today</button>\n      <button id="next-month">Next</button>\n      <span id="month-year">${this.formatMonthYear()}</span>\n      <input type="radio" name="view" id="month-view" ${"month"===this.selectedMode?"checked":""}>\n      <label for="month-view">Month</label>\n      <input type="radio" name="view" id="week-view" ${"week"===this.selectedMode?"checked":""}>\n      <label for="week-view">Week</label>      \n    `,this.rootEl.querySelector("#prev-month").addEventListener("click",(()=>{console.log(`Prev ${this.selectedMode} clicked`),this.dispatchEvent(new g("prev"))})),this.rootEl.querySelector("#next-month").addEventListener("click",(()=>{console.log(`Next ${this.selectedMode} clicked`),this.dispatchEvent(new g("next"))})),this.rootEl.querySelector("#today").addEventListener("click",(()=>{console.log("Today clicked"),this.dispatchEvent(new g("today"))})),this.rootEl.querySelector("#month-view").addEventListener("click",(()=>{console.log("Month view clicked"),this.dispatchEvent(new g("month-view")),this.selectedMode="month"})),this.rootEl.querySelector("#week-view").addEventListener("click",(()=>{console.log("Week view clicked"),this.dispatchEvent(new g("week-view")),this.selectedMode="week"}))}set date(e){this._date=e,this.render()}}class z{constructor(e,t,n){this.el=e,this._events=[],this._date=new Date,this.rootEl=e,this._date=t,this._events=n,this.render()}render(){if(this.rootEl.innerHTML="\n      <h2>Click a day to view events</h2>\n    ",!this._events.length)return;this.rootEl.innerHTML="";const e=document.createElement("ul");e.className="events",this.rootEl.appendChild(e);for(const t of this._events)e.innerHTML+=t.asFullHTML()}set events(e){this._events=e,this.render()}}const Q=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];class Z extends G{constructor(e,t,n){super(),this.el=e,this._date=new Date,this.rootEl=e,this._date=t,this._events=n,this.render()}render(){this.rootEl.innerHTML="";const e=this._date.getMonth(),t=this._date.getFullYear(),n=this._date.getDate(),s=this._date.getDay(),i=new Date(t,e,n-s);for(let n=0;n<7;n++){const s=new Date(t,e,i.getDate()+n);this.rootEl.insertAdjacentHTML("beforeend",this.renderDay(s,s.getDate())),this.rootEl.lastElementChild.addEventListener("click",(e=>{this.dispatchEvent(new CustomEvent("day-clicked",{detail:s}))}))}this.updateNowMarker()}renderDay(e,t,n=""){const s=U(this._events,e);return`\n      <div class="day ${e.toDateString()===(new Date).toDateString()?"today":""} ${n}">\n        <div class="header">\n          <span class="day-name">${Q[e.getDay()]}</span>\n          <span class="day-number">${t}</span>\n        </div>\n        <ul class="events">\n          ${s.map((e=>e.asMediumLengthHTML())).join("")}\n        </ul>\n      </div>\n    `}updateNowMarker(){const e=new Date,t=100*(100*e.getHours()+e.getMinutes())/2400,n=this.rootEl.querySelector(".day.today");if(n){const e=n.offsetHeight*t/100;this.rootEl.style.setProperty("--now-marker",`${e}px`)}setTimeout((()=>this.updateNowMarker()),1e3)}set date(e){this._date=e,this.render()}set events(e){this._events=e,this.render()}}class K extends G{constructor(e,t,n,s){super(),this.mode="month",this.rootEl=e,this._date=t,this._events=s,this.mode=n,this.render()}render(){this.rootEl.innerHTML="",this.toolbarEl=document.createElement("div"),this.toolbarEl.id="toolbar",this.rootEl.appendChild(this.toolbarEl),this.toolbar=new X(this.toolbarEl,this._date,this.mode),this.toolbar.addEventListener("prev",(()=>{const e="month"===this.mode?new Date(this._date.getFullYear(),this._date.getMonth()-1,1):new Date(this._date.getFullYear(),this._date.getMonth(),this._date.getDate()-7);this.date=e,this.dispatchEvent(new CustomEvent("date-changed",{detail:this._date}))})),this.toolbar.addEventListener("next",(()=>{const e="month"===this.mode?new Date(this._date.getFullYear(),this._date.getMonth()+1,1):new Date(this._date.getFullYear(),this._date.getMonth(),this._date.getDate()+7);this.date=e,this.dispatchEvent(new CustomEvent("date-changed",{detail:this._date}))})),this.toolbar.addEventListener("today",(()=>{this.date=new Date,this.dispatchEvent(new CustomEvent("date-changed",{detail:this._date}))})),this.toolbar.addEventListener("month-view",(()=>{this.mode="month",this.monthGridEl.style.display="grid",this.weekGridEl.style.display="none",this.dispatchEvent(new CustomEvent("mode-changed",{detail:this.mode}))})),this.toolbar.addEventListener("week-view",(()=>{this.mode="week",this.monthGridEl.style.display="none",this.weekGridEl.style.display="grid",this.dispatchEvent(new CustomEvent("mode-changed",{detail:this.mode}))})),this.monthGridEl=document.createElement("div"),this.monthGridEl.id="month-grid",this.rootEl.appendChild(this.monthGridEl),this.monthGrid=new q(this.monthGridEl,this._date,this._events),this.weekGridEl=document.createElement("div"),this.weekGridEl.id="week-grid",this.rootEl.appendChild(this.weekGridEl),this.weekGrid=new Z(this.weekGridEl,this._date,this._events),this.sidebarEl=document.createElement("div"),this.sidebarEl.id="sidebar",this.rootEl.appendChild(this.sidebarEl),this.sidebar=new z(this.sidebarEl,this._date,this._events),this.monthGrid.addEventListener("day-clicked",(e=>{const t=e.detail,n=U(this._events,t);this.sidebar.events=n})),this.weekGrid.addEventListener("day-clicked",(e=>{const t=e.detail,n=U(this._events,t);this.sidebar.events=n})),this.sidebar.events=U(this._events,new Date),"week"===this.mode?(this.monthGridEl.style.display="none",this.weekGridEl.style.display="grid"):(this.monthGridEl.style.display="grid",this.weekGridEl.style.display="none")}set date(e){console.log("Setting date to",e),this._date=e,this.monthGrid.date=e,this.weekGrid.date=e,this.toolbar.date=e,this.sidebar.events=U(this._events,this._date)}set events(e){this._events=e,this.monthGrid.events=e,this.weekGrid.events=e,this.sidebar.events=U(this._events,this._date)}}class ee{constructor(e,t,n){this.rsvp=!1,this.title=e,this.id=t,this.date=n}asOneLineHTML(e=void 0){const t=this.time?`<span class="time">${this.time}</span>`:"";return`\n      <li id="id-${this.id}" data-index-in-grid="${e}" class="event${this.multiDays?" multi-day":""}${this.rsvp?"":" unconfirmed"}" style="--event-color: ${this.color};">\n        <div>${t} <span class="title">${this.title}</span></div>\n      </li>\n    `}asMediumLengthHTML(){const e=this.time?`<span class="time">${this.time}</span>`:"";return`\n      <li id="id-${this.id}" class="event${this.multiDays?" multi-day":""}${this.rsvp?"":" unconfirmed"}" style="--event-color: ${this.color};">\n        <div>${e}</div>\n        <p class="title">${this.title}</p>\n        <p>${this.description}</p>\n      </li>\n    `}asFullHTML(){let e="";return this.multiDays?e=`From ${this.multiDays.start.toDateString()} to ${this.multiDays.end.toDateString()}`:(e=this.date.toDateString(),this.time&&(e+=`, at ${this.time}`),this.repeat&&(e+=`, ${this.repeat}`),this.duration&&(e+=` (${this.duration} minutes)`)),`\n      <li class="event${this.rsvp?"":" unconfirmed"}" style="--event-color: ${this.color};">\n        <div>\n          <h2>${this.title}</h2>\n          <p class="when">${e}</p>\n          ${this.location?`<p class="where">${this.location}</p>`:""}\n          <p class="what">${this.description}</p>\n        </div>\n      </li>\n    `}}var te=function(e,t,n,s){return new(n||(n=Promise))((function(i,o){function a(e){try{l(s.next(e))}catch(e){o(e)}}function r(e){try{l(s.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,r)}l((s=s.apply(e,t||[])).next())}))};class ne{constructor(e){this.events=e}start(){this.popupEl||(this.popupEl=document.createElement("div"),this.popupEl.className="popup"),addEventListener("mousemove",(e=>{this.popupEl.classList.remove("visible"),this.popupEl.remove();const t=e.target.closest("#month-grid .event, #week-grid .event");if(!t)return;const n=t.id;if(!n||!n.startsWith("id-"))return;let s=n.replace("id-","");const i=this.events.find((e=>e.id===s));if(!i)return void console.log("No event found for id",s);const o=parseInt(t.dataset.indexInGrid);this.popupEl.style.setProperty("--event-color",i.color),this.popupEl.classList.toggle("visible",!0),this.popupEl.classList.toggle("unconfirmed",!i.rsvp);let a="";i.multiDays?a=`From ${i.multiDays.start.toDateString()} to ${i.multiDays.end.toDateString()}`:(a=i.date.toDateString(),i.time&&(a+=`, at ${i.time}`),i.repeat&&(a+=`, ${i.repeat}`),i.duration&&(a+=` (${i.duration} minutes)`)),this.popupEl.innerHTML=`\n        <h2>${i.title}</h2>\n        <p class="when">${a}</p>\n        ${i.location?`<p class="where">${i.location}</p>`:""}\n        <p class="what">${i.description}</p>\n      `,document.body.appendChild(this.popupEl);const r=t.getBoundingClientRect(),l=r.top,c=r.right,d=r.left,h=r.width;this.popupEl.style.top=o>=28?l-this.popupEl.clientHeight+"px":`${l}px`,6===o||13===o||20===o||27===o||34===o?(this.popupEl.style.left=d-h+"px",this.popupEl.classList.toggle("left",!0)):(this.popupEl.style.left=`${c}px`,this.popupEl.classList.toggle("left",!1))}))}}class se{getStoredPrefs(){return e=this,t=void 0,s=function*(){yield new Promise((e=>setTimeout(e,250*Math.random())));const e=localStorage.getItem("slow-cal-mode"),t=localStorage.getItem("slow-cal-initDate");return{mode:e,initDate:t?new Date(t):void 0}},new((n=void 0)||(n=Promise))((function(i,o){function a(e){try{l(s.next(e))}catch(e){o(e)}}function r(e){try{l(s.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,r)}l((s=s.apply(e,t||[])).next())}));var e,t,n,s}set mode(e){console.log("Storing mode prefs"),localStorage.setItem("slow-cal-mode",e)}set initDate(e){console.log("Storing date prefs"),localStorage.setItem("slow-cal-initDate",e.toISOString())}}addEventListener("DOMContentLoaded",(()=>{return e=void 0,t=void 0,s=function*(){const e=new se,t=yield e.getStoredPrefs(),n=t.initDate||new Date,s=t.mode||"month",i=document.getElementById("app"),o=new K(i,n,s,[]),a=yield function(){return te(this,void 0,void 0,(function*(){const e=yield function(){return te(this,void 0,void 0,(function*(){console.log("Fetching calendar data ..."),yield new Promise((e=>setTimeout(e,500*Math.random())));const e=yield fetch("./data.json");return yield e.json()}))}();return console.log("Processing events ..."),e.events.map((e=>function(e){const t=[new Date(e.startDate)];let n=null;if(e.repeat){const n=new Date(e.startDate),s=e.endDate?new Date(e.endDate):new Date(n.getTime()+15768e7);if("daily"===e.repeat){console.log("Expanding daily event ...");const e=(s.getTime()-n.getTime())/864e5;for(let s=1;s<=e;s++){const e=new Date(n.getTime()+24*s*60*60*1e3);0!==e.getDay()&&6!==e.getDay()&&t.push(e)}}else if("weekly"===e.repeat){console.log("Expanding weekly event ...");const e=(s.getTime()-n.getTime())/6048e5;for(let s=1;s<=e;s++){const e=new Date(n.getTime()+7*s*24*60*60*1e3);t.push(e)}}else if("monthly"===e.repeat){console.log("Expanding monthly event ...");const e=12*(s.getFullYear()-n.getFullYear())+(s.getMonth()-n.getMonth());for(let s=1;s<=e;s++){const e=new Date(n.getTime());e.setMonth(e.getMonth()+s),t.push(e)}}else if("yearly"===e.repeat){console.log("Expanding yearly event ...");const e=s.getFullYear()-n.getFullYear();for(let s=1;s<=e;s++){const e=new Date(n.getTime());e.setFullYear(e.getFullYear()+s),t.push(e)}}}else if(e.endDate){const s=new Date(e.startDate),i=new Date(e.endDate),o=(i.getTime()-s.getTime())/864e5;for(let e=1;e<=o;e++){const n=new Date(s.getTime()+24*e*60*60*1e3);t.push(n)}n={start:s,end:i}}return t.map(((t,s)=>{const i=e.id+(s>0?`-${s}`:""),o=new ee(e.title,i,t);return o.multiDays=n,o.color=e.color,o.time=e.startTime,o.duration=e.duration,o.repeat=e.repeat,o.location=e.location,o.description=e.description,o.rsvp=e.rsvp,o}))}(e))).flat()}))}();console.log("Refreshing calendar with events"),o.events=a,console.log("Initializing the popup util"),new ne(a).start(),o.addEventListener("mode-changed",(t=>{e.mode=t.detail})),o.addEventListener("date-changed",(t=>{e.initDate=t.detail}))},new((n=void 0)||(n=Promise))((function(i,o){function a(e){try{l(s.next(e))}catch(e){o(e)}}function r(e){try{l(s.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,r)}l((s=s.apply(e,t||[])).next())}));var e,t,n,s}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,